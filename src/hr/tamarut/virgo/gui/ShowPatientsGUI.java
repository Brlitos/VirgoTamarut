/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.tamarut.virgo.gui;

import hr.tamarut.virgo.bussiness.DoctorsService;
import hr.tamarut.virgo.bussiness.PatientsService;
import hr.tamarut.virgo.model.Doctor;
import hr.tamarut.virgo.model.Patient;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;

/**
 *
 * @author TAMARUT
 */
public class ShowPatientsGUI extends javax.swing.JFrame {

    /**
     * Creates new form ShowPatientsGUI
     */
    public ShowPatientsGUI() {
        initComponents();
        initialization();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPatients = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientsList = new javax.swing.JList<>();
        lblDoctor = new javax.swing.JLabel();
        cbDoctors = new javax.swing.JComboBox<>();
        btnAssignToDoctor = new javax.swing.JButton();
        btnUnassignFromDoctor = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        doctorsList = new javax.swing.JList<>();
        tfPrice = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnCharge = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblPatients.setText("List of patients:");

        jScrollPane1.setViewportView(patientsList);

        lblDoctor.setText("Doctor:");

        cbDoctors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDoctorsActionPerformed(evt);
            }
        });

        btnAssignToDoctor.setText("Assign to Doctor");
        btnAssignToDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToDoctorActionPerformed(evt);
            }
        });

        btnUnassignFromDoctor.setText("Unassign from Doctor");
        btnUnassignFromDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnassignFromDoctorActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(doctorsList);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Price ($):");

        btnCharge.setText("Charge");
        btnCharge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChargeMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPatients)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDoctor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnUnassignFromDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAssignToDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2))
                            .addComponent(btnCharge))
                        .addGap(31, 31, 31))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDoctor))
                .addGap(18, 18, 18)
                .addComponent(lblPatients)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUnassignFromDoctor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAssignToDoctor)
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCharge, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbDoctorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDoctorsActionPerformed
        refreshPatientsList();
        refreshDoctorsList();
    }//GEN-LAST:event_cbDoctorsActionPerformed

    private void refreshPatientsList(){
        Doctor selectedDoctor = (Doctor) cbDoctors.getSelectedItem();
        List<Patient> patients = new ArrayList<>();
        //if none is selected (false doctor without id) all patients are fetched
        if(selectedDoctor.getIDDoctor() == 0){
            patients.addAll(PatientsService.getInstance().getAllPatientsShortInfo());
        } else {
            //else fetch patients assigned to selected doctor
            patients.addAll(PatientsService.getInstance().getPatientsAssignedToDoctor(selectedDoctor.getIDDoctor()));
        }
        DefaultListModel<Patient> patientsModel = new DefaultListModel<>();
        for(Patient patient : patients){
            patientsModel.addElement(patient);
        }
        patientsList.setModel(patientsModel);
    }
    
    private void refreshDoctorsList(){
        List<Doctor> doctors = DoctorsService.getInstance().getAllDoctors();
        DefaultListModel<Doctor> doctorsModel = new DefaultListModel<>();
        for(Doctor doctor : doctors){
            if(doctor.getIDDoctor() != 0 && doctor.getIDDoctor() != ((Doctor) cbDoctors.getSelectedItem()).getIDDoctor())
                doctorsModel.addElement(doctor);
        }
        doctorsList.setModel(doctorsModel);
        
    }
    
    private void btnUnassignFromDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnassignFromDoctorActionPerformed
        Patient patient = patientsList.getSelectedValue();
        Doctor doctor = (Doctor) cbDoctors.getSelectedItem();
           
        if(doctor.getIDDoctor() != 0 && patient != null){
            PatientsService.getInstance().removePatientFromDoctor(patient.getIDPatient(), doctor.getIDDoctor());
        }
        refreshPatientsList();
    }//GEN-LAST:event_btnUnassignFromDoctorActionPerformed

    private void btnAssignToDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToDoctorActionPerformed
        Patient patient = patientsList.getSelectedValue();
        Doctor doctor = doctorsList.getSelectedValue();
        
        if(patient != null && doctor != null){
            //check if already assigned
            List<Patient> alreadyAssignedPatients = PatientsService.getInstance().getPatientsAssignedToDoctor(doctor.getIDDoctor());
            for(Patient p : alreadyAssignedPatients){
                //already assigned so return
                if(p.getIDPatient() == patient.getIDPatient())
                    return;
            }
          
            PatientsService.getInstance().assignPatientToDoctor(patient.getIDPatient(), doctor.getIDDoctor());
        }
    }//GEN-LAST:event_btnAssignToDoctorActionPerformed

    private void btnChargeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChargeMouseClicked
        int IDDoctor = ((Doctor)cbDoctors.getSelectedItem()).getIDDoctor();
        int IDPatient = (patientsList.getSelectedValue().getIDPatient());
        PatientsService.getInstance().chargePatient(IDDoctor, IDPatient, Integer.parseInt(tfPrice.getText()));
    }//GEN-LAST:event_btnChargeMouseClicked

    private DefaultComboBoxModel<Doctor> comboModel;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignToDoctor;
    private javax.swing.JButton btnCharge;
    private javax.swing.JButton btnUnassignFromDoctor;
    private javax.swing.JComboBox<Doctor> cbDoctors;
    private javax.swing.JList<Doctor> doctorsList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDoctor;
    private javax.swing.JLabel lblPatients;
    private javax.swing.JList<Patient> patientsList;
    private javax.swing.JTextField tfPrice;
    // End of variables declaration//GEN-END:variables
 
    private void initialization(){
        List<Doctor> doctors = new ArrayList<>();
        doctors.add(new Doctor("None selected", "", "", null));
        doctors.addAll(DoctorsService.getInstance().getAllDoctors());
        
        DefaultComboBoxModel<Doctor> model = new DefaultComboBoxModel<>();
        for(Doctor doctor : doctors){
            model.addElement(doctor);
        }
        
        cbDoctors.setModel(model);
        cbDoctors.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JComboBox box = (JComboBox)e.getSource();
                Doctor selected = (Doctor)box.getSelectedItem();
            }
        });
        
        
        
        cbDoctors.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Component renderer = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (renderer instanceof JLabel && value instanceof Doctor) {
                    // Here value will be of the Type 'CD'
                    ((JLabel) renderer).setText(((Doctor) value).getFirstName() + " " + ((Doctor) value).getLastName());
                }
                return renderer;
            }
        });
        
        List<Patient> patients = PatientsService.getInstance().getAllPatientsShortInfo();
        
        DefaultListModel<Patient> patientsModel = new DefaultListModel<>();
        for(Patient patient : patients){
            patientsModel.addElement(patient);
        }
        patientsList.setModel(patientsModel);
        
        patientsList.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Component renderer = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (renderer instanceof JLabel && value instanceof Patient) {
                    // Here value will be of the Type 'CD'
                    ((JLabel) renderer).setText(((Patient) value).getFirstName() + " " + ((Patient) value).getLastName());
                }
                return renderer;
            }
        });
             
        DefaultListModel<Doctor> doctorsModel = new DefaultListModel<>();
        for(Doctor doctor : doctors){
            if(doctor.getIDDoctor() != 0)
                doctorsModel.addElement(doctor);
        }
        doctorsList.setModel(doctorsModel);
        
        doctorsList.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Component renderer = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (renderer instanceof JLabel && value instanceof Doctor) {
                    // Here value will be of the Type 'CD'
                    Doctor doctor = (Doctor) value;
                    ((JLabel) renderer).setText(doctor.getTitle() + " " + doctor.getFirstName() + " " + doctor.getLastName());
                }
                return renderer;
            }
        });
    }
        
}
